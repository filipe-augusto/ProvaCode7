@page "/ListaClientes/EditarCliente/{IdCliente}"
@inject HttpClient http
@inject NavigationManager navigation
<div class="pcoded-main-container">
    <div class="pcoded-content">
        <ul class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Inicio</a></li>
            <li class="breadcrumb-item"><a href="/ListaClientes">Clientes</a></li>
            <li class="breadcrumb-item"><span>Editar</span></li>
        </ul>
    </div>
    <div class="row">
        <div class="col-12">
            <div class=" card">
                <div class="card-header">
                    <div class="row">
                        <div class="col-md-12">
                            Editar Cliente
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-12">
                            <Mensagem Texto="@_mensagem" TipoMensagem="@_tipoMensagem" Exibir="_exibir"></Mensagem>
                        </div>
                    </div>
                    @if (viewModel != null)
                    {
                        <FomularioClienteForm ViewModel="viewModel" OnValidSubmit="EditarCliente" SubmitForm="submit" TextoBotao="Editar"> </FomularioClienteForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>




@code {
    [Parameter]
    public string IdCliente { get; set; }
    ClienteViewModel viewModel;// = new ClienteViewModel();
    bool submit = false;
    #region conf mensagem
    string _mensagem = "";
    string _tipoMensagem = "";
    bool _exibir;
    #endregion


    protected override async Task OnInitializedAsync()
    {
        IdCliente = IdCliente.Replace("1N33D70p4557h!57e57","");
        decimal id = Convert.ToDecimal(IdCliente) / 10;

        IdCliente = id.ToString();
        Console.WriteLine(IdCliente);

        await CarregaModel();


    }


    async Task CarregaModel()
    {
        try
        {

            int id = Convert.ToInt32(IdCliente);
            viewModel = await http.GetFromJsonAsync<ClienteViewModel>($"api/Cliente/{id}");
        }
        catch (Exception ex)
        {
            await ChamaMensagem("Erro para carregar os dados do cliente!", "danger", 10);
        }
    }

    async Task EditarCliente()
    {
        try
        {
            submit = true;
            var httpResponse = await http.PutAsJsonAsync("api/Cliente", viewModel);

            if (httpResponse.IsSuccessStatusCode)
            {
                await ChamaMensagem("Alterado com sucesso!", "success", 4);
                navigation.NavigateTo("/ListaClientes");
            }
        }
        catch (Exception ex)
        {
            await ChamaMensagem("Erro para editar o cliente.", "danger", 10);
        }
        finally
        {
            submit = false;
        }
    }

    async Task ChamaMensagem(string mensagem, string tipomensagem, int quantidadeSegundos)
    {
        _mensagem = mensagem;
        _tipoMensagem = tipomensagem;
        _exibir = true;
        await Task.Delay(quantidadeSegundos * 1000);
        _exibir = false;
    }

}
